-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Parabc where
import Absabc
import Lexabc
import ErrM

}

%name pProgram Program
%name pListStm ListStm
%name pStm Stm
%name pListDec ListDec
%name pDec Dec
%name pListParam ListParam
%name pParam Param
%name pType Type
%name pType1 Type1
%name pListExpr ListExpr
%name pExpr Expr
%name pExpr1 Expr1
%name pExpr2 Expr2
%name pExpr3 Expr3
%name pExpr4 Expr4
%name pExpr5 Expr5
%name pAssOpr AssOpr
%name pVal Val
%name pVar Var
%name pVar1 Var1
%name pVar2 Var2

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token
  '!=' { PT _ (TS _ 1) }
  '%' { PT _ (TS _ 2) }
  '%=' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '*=' { PT _ (TS _ 9) }
  '+' { PT _ (TS _ 10) }
  '++' { PT _ (TS _ 11) }
  '+=' { PT _ (TS _ 12) }
  ',' { PT _ (TS _ 13) }
  '-' { PT _ (TS _ 14) }
  '--' { PT _ (TS _ 15) }
  '-=' { PT _ (TS _ 16) }
  '.' { PT _ (TS _ 17) }
  '/' { PT _ (TS _ 18) }
  '/=' { PT _ (TS _ 19) }
  ';' { PT _ (TS _ 20) }
  '<' { PT _ (TS _ 21) }
  '<=' { PT _ (TS _ 22) }
  '=' { PT _ (TS _ 23) }
  '==' { PT _ (TS _ 24) }
  '>' { PT _ (TS _ 25) }
  '>=' { PT _ (TS _ 26) }
  '[' { PT _ (TS _ 27) }
  '[]' { PT _ (TS _ 28) }
  ']' { PT _ (TS _ 29) }
  'bool' { PT _ (TS _ 30) }
  'char' { PT _ (TS _ 31) }
  'else' { PT _ (TS _ 32) }
  'false' { PT _ (TS _ 33) }
  'fi' { PT _ (TS _ 34) }
  'for' { PT _ (TS _ 35) }
  'if' { PT _ (TS _ 36) }
  'int' { PT _ (TS _ 37) }
  'print' { PT _ (TS _ 38) }
  'println' { PT _ (TS _ 39) }
  'read' { PT _ (TS _ 40) }
  'return' { PT _ (TS _ 41) }
  'string' { PT _ (TS _ 42) }
  'struct' { PT _ (TS _ 43) }
  'true' { PT _ (TS _ 44) }
  'void' { PT _ (TS _ 45) }
  'while' { PT _ (TS _ 46) }
  '{' { PT _ (TS _ 47) }
  '||' { PT _ (TS _ 48) }
  '}' { PT _ (TS _ 49) }
  '~' { PT _ (TS _ 50) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_charac { PT _ (TC $$) }
L_quoted { PT _ (TL $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }
String  :: { String }  : L_quoted {  $1 }

Program :: { Program }
Program : ListStm { Prog (reverse $1) } 


ListStm :: { [Stm] }
ListStm : {- empty -} { [] } 
  | ListStm Stm ';' { flip (:) $1 $2 }


Stm :: { Stm }
Stm : Expr { StmExpr $1 } 
  | Dec { StmDec $1 }
  | 'while' '(' Expr ')' Stm { StmWhile $3 $5 }
  | 'if' '(' Expr ')' Stm 'fi' { StmIf $3 $5 }
  | 'if' '(' Expr ')' Stm 'else' Stm { StmIfE $3 $5 $7 }
  | '{' ListStm '}' { StmBloc (reverse $2) }
  | 'for' '(' Dec ';' Expr ';' Stm ')' Stm { StmFor $3 $5 $7 $9 }
  | 'return' { StmRet }
  | 'return' Expr { StmRetV $2 }
  | 'print' Expr { StmPrint $2 }
  | 'println' Expr { StmPrintLn $2 }
  | 'read' Var { StmRead $2 }


ListDec :: { [Dec] }
ListDec : {- empty -} { [] } 
  | ListDec Dec ';' { flip (:) $1 $2 }


Dec :: { Dec }
Dec : Type Ident { DVar $1 $2 } 
  | Type Ident '=' Expr { DInit $1 $2 $4 }
  | Type Ident '[' Expr ']' { DArr $1 $2 $4 }
  | 'struct' Ident '{' ListDec '}' { DRec $2 (reverse $4) }
  | Type Ident '(' ListParam ')' Stm { DFunc $1 $2 $4 $6 }


ListParam :: { [Param] }
ListParam : {- empty -} { [] } 
  | Param { (:[]) $1 }
  | Param ',' ListParam { (:) $1 $3 }


Param :: { Param }
Param : Type Ident { PVal $1 $2 } 
  | Type '&' Ident { PVar $1 $3 }


Type :: { Type }
Type : Ident { TCust $1 } 
  | 'int' { TInt }
  | 'bool' { TBool }
  | 'char' { TChar }
  | 'string' { TStr }
  | 'void' { TVoid }
  | Type1 { $1 }


Type1 :: { Type }
Type1 : Type '[]' { TArr $1 } 


ListExpr :: { [Expr] }
ListExpr : {- empty -} { [] } 
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }


Expr :: { Expr }
Expr : Var '=' Expr { ExprAss $1 $3 } 
  | Var AssOpr Expr { ExprAssO $1 $2 $3 }
  | Var '++' { ExprIR $1 }
  | '++' Var { ExprIL $2 }
  | Var '--' { ExprDR $1 }
  | '--' Var { ExprDL $2 }
  | Expr1 { $1 }


Expr1 :: { Expr }
Expr1 : Expr2 '&&' Expr2 { ExprAnd $1 $3 } 
  | Expr2 '||' Expr2 { ExprOr $1 $3 }
  | '~' Expr2 { ExprNot $2 }
  | Expr2 { $1 }


Expr2 :: { Expr }
Expr2 : Expr3 '<' Expr3 { ExprLt $1 $3 } 
  | Expr3 '<=' Expr3 { ExprLte $1 $3 }
  | Expr3 '==' Expr3 { ExprEq $1 $3 }
  | Expr3 '!=' Expr3 { ExprNEq $1 $3 }
  | Expr3 '>=' Expr3 { ExprGte $1 $3 }
  | Expr3 '>' Expr3 { ExprGt $1 $3 }
  | Expr3 { $1 }


Expr3 :: { Expr }
Expr3 : Expr3 '+' Expr4 { ExprAdd $1 $3 } 
  | Expr3 '-' Expr4 { ExprSub $1 $3 }
  | Expr3 '%' Expr4 { ExprMod $1 $3 }
  | Expr4 { $1 }


Expr4 :: { Expr }
Expr4 : Expr4 '*' Expr5 { ExprMul $1 $3 } 
  | Expr4 '/' Expr5 { ExprDiv $1 $3 }
  | Expr5 { $1 }


Expr5 :: { Expr }
Expr5 : Val { ExprVal $1 } 
  | Var { ExprVar $1 }
  | Var '(' ListExpr ')' { ExprCall $1 $3 }
  | '(' Expr ')' { $2 }


AssOpr :: { AssOpr }
AssOpr : '+=' { AssAdd } 
  | '-=' { AssSub }
  | '*=' { AssMul }
  | '/=' { AssDiv }
  | '%=' { AssMod }


Val :: { Val }
Val : Integer { ValInt $1 } 
  | Char { ValChar $1 }
  | String { ValStr $1 }
  | 'true' { ValTrue }
  | 'false' { ValFalse }


Var :: { Var }
Var : Var '[' Expr ']' { VarArr $1 $3 } 
  | Var1 { $1 }


Var1 :: { Var }
Var1 : Var '.' Ident { VarRec $1 $3 } 
  | Var2 { $1 }


Var2 :: { Var }
Var2 : Ident { VarVar $1 } 



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

